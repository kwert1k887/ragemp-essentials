{
  "version": 3,
  "sources": ["../src/blip/index.ts", "../src/index.ts"],
  "sourcesContent": ["/** \u0422\u0438\u043F \u0434\u043B\u044F \u043A\u043E\u043E\u0440\u0434\u0438\u043D\u0430\u0442 */\r\nimport { Coordinate } from 'types/Coordinate';\r\n\r\n/** \u041E\u043F\u0446\u0438\u0438 \u0434\u043B\u044F \u0441\u043E\u0437\u0434\u0430\u043D\u0438\u044F \"Blip\" (\u043C\u0435\u0442\u043A\u0438 \u043D\u0430 \u043A\u0430\u0440\u0442\u0435) */\r\nexport interface BlipOptions {\r\n    name?: string;          // \u0418\u043C\u044F \u043C\u0435\u0442\u043A\u0438\r\n    scale?: number;         // \u041C\u0430\u0441\u0448\u0442\u0430\u0431\r\n    color?: number;         // \u0426\u0432\u0435\u0442\r\n    alpha?: number;         // \u041F\u0440\u043E\u0437\u0440\u0430\u0447\u043D\u043E\u0441\u0442\u044C\r\n    drawDistance?: number;  // \u0420\u0430\u0441\u0441\u0442\u043E\u044F\u043D\u0438\u0435 \u0432\u0438\u0434\u0438\u043C\u043E\u0441\u0442\u0438\r\n    shortRange?: boolean;   // \u041C\u0430\u043B\u0430\u044F \u0434\u0430\u043B\u044C\u043D\u043E\u0441\u0442\u044C\r\n    rotation?: number;      // \u0423\u0433\u043E\u043B \u043F\u043E\u0432\u043E\u0440\u043E\u0442\u0430\r\n    radius?: number;        // \u0420\u0430\u0434\u0438\u0443\u0441\r\n}\r\n\r\n/** \u041A\u043B\u0430\u0441\u0441 \u0434\u043B\u044F \u0440\u0430\u0431\u043E\u0442\u044B \u0441 \u043C\u0435\u0442\u043A\u0430\u043C\u0438 (Blip) \u043D\u0430 \u043A\u0430\u0440\u0442\u0435 */\r\nexport class Blip {\r\n    /** \u0421\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043A\u0430\u044F \u0444\u0443\u043D\u043A\u0446\u0438\u044F \u0434\u043B\u044F \u0441\u043E\u0437\u0434\u0430\u043D\u0438\u044F \u043C\u0435\u0442\u043A\u0438 (\u0438\u043B\u0438 \u043D\u0435\u0441\u043A\u043E\u043B\u044C\u043A\u0438\u0445 \u043C\u0435\u0442\u043E\u043A) */\r\n    static create(sprite: number, pos: Coordinate, options?: BlipOptions): BlipMp;\r\n    static create(sprite: number, pos: Coordinate[], options?: BlipOptions): BlipMp[];\r\n\r\n    /** \u041E\u0441\u043D\u043E\u0432\u043D\u0430\u044F \u0444\u0443\u043D\u043A\u0446\u0438\u044F \u0434\u043B\u044F \u0441\u043E\u0437\u0434\u0430\u043D\u0438\u044F \u043C\u0435\u0442\u043A\u0438 \u0438\u043B\u0438 \u043D\u0435\u0441\u043A\u043E\u043B\u044C\u043A\u0438\u0445 \u043C\u0435\u0442\u043E\u043A */\r\n    static create(spriteOrData: number, posOrOptions?: any, maybeOptions?: any): any {\r\n        try {\r\n            const sprite: number = spriteOrData;\r\n            if (Array.isArray(posOrOptions)) {\r\n                const coords: Coordinate[] = posOrOptions;\r\n                const options: BlipOptions = maybeOptions || {};\r\n                return coords.map(coord => Blip.createSingle(sprite, coord, options));  // \u0421\u043E\u0437\u0434\u0430\u0435\u043C \u043D\u0435\u0441\u043A\u043E\u043B\u044C\u043A\u043E \u043C\u0435\u0442\u043E\u043A\r\n            } else {\r\n                const coord: Coordinate = posOrOptions;\r\n                const options: BlipOptions = maybeOptions || {};\r\n                return Blip.createSingle(sprite, coord, options);  // \u0421\u043E\u0437\u0434\u0430\u0435\u043C \u043E\u0434\u043D\u0443 \u043C\u0435\u0442\u043A\u0443\r\n            }\r\n        } catch (e) {\r\n            console.log(e); // \u041B\u043E\u0433\u0438\u0440\u0443\u0435\u043C \u043E\u0448\u0438\u0431\u043A\u0443\r\n        }\r\n    }\r\n\r\n    /** \u0424\u0443\u043D\u043A\u0446\u0438\u044F \u0434\u043B\u044F \u0441\u043E\u0437\u0434\u0430\u043D\u0438\u044F \u043E\u0434\u043D\u043E\u0439 \u043C\u0435\u0442\u043A\u0438 */\r\n    private static createSingle(sprite: number, coord: Coordinate, options: BlipOptions): BlipMp {\r\n        const { x, y, z, dimension = 0 } = coord;  // \u0418\u0437\u0432\u043B\u0435\u043A\u0430\u0435\u043C \u043A\u043E\u043E\u0440\u0434\u0438\u043D\u0430\u0442\u044B \u0438 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435 dimension\r\n\r\n        return mp.blips.new(sprite, new mp.Vector3(x, y, z), {  // \u0421\u043E\u0437\u0434\u0430\u0435\u043C \u043C\u0435\u0442\u043A\u0443 \u043D\u0430 \u043A\u0430\u0440\u0442\u0435 \u0441 \u0443\u043A\u0430\u0437\u0430\u043D\u043D\u044B\u043C\u0438 \u043E\u043F\u0446\u0438\u044F\u043C\u0438\r\n            name: options.name || \"\",\r\n            scale: options.scale ?? 1,\r\n            color: options.color ?? 0,\r\n            alpha: options.alpha ?? 255,\r\n            drawDistance: options.drawDistance ?? 100,\r\n            shortRange: options.shortRange ?? false,\r\n            rotation: options.rotation ?? 0,\r\n            dimension: dimension\r\n        });\r\n    }\r\n}", "import { Blip } from './blip';\r\nexport * from './types/Coordinate';\r\n\r\nexport const essentials = {\r\n    blip: {\r\n        create: Blip.create,\r\n    }\r\n};"],
  "mappings": ";AAgBO,IAAM,OAAN,MAAM,MAAK;AAAA;AAAA,EAMd,OAAO,OAAO,cAAsB,cAAoB,cAAyB;AAC7E,QAAI;AACA,YAAM,SAAiB;AACvB,UAAI,MAAM,QAAQ,YAAY,GAAG;AAC7B,cAAM,SAAuB;AAC7B,cAAM,UAAuB,gBAAgB,CAAC;AAC9C,eAAO,OAAO,IAAI,WAAS,MAAK,aAAa,QAAQ,OAAO,OAAO,CAAC;AAAA,MACxE,OAAO;AACH,cAAM,QAAoB;AAC1B,cAAM,UAAuB,gBAAgB,CAAC;AAC9C,eAAO,MAAK,aAAa,QAAQ,OAAO,OAAO;AAAA,MACnD;AAAA,IACJ,SAAS,GAAG;AACR,cAAQ,IAAI,CAAC;AAAA,IACjB;AAAA,EACJ;AAAA;AAAA,EAGA,OAAe,aAAa,QAAgB,OAAmB,SAA8B;AACzF,UAAM,EAAE,GAAG,GAAG,GAAG,YAAY,EAAE,IAAI;AAEnC,WAAO,GAAG,MAAM,IAAI,QAAQ,IAAI,GAAG,QAAQ,GAAG,GAAG,CAAC,GAAG;AAAA;AAAA,MACjD,MAAM,QAAQ,QAAQ;AAAA,MACtB,OAAO,QAAQ,SAAS;AAAA,MACxB,OAAO,QAAQ,SAAS;AAAA,MACxB,OAAO,QAAQ,SAAS;AAAA,MACxB,cAAc,QAAQ,gBAAgB;AAAA,MACtC,YAAY,QAAQ,cAAc;AAAA,MAClC,UAAU,QAAQ,YAAY;AAAA,MAC9B;AAAA,IACJ,CAAC;AAAA,EACL;AACJ;;;ACnDO,IAAM,aAAa;AAAA,EACtB,MAAM;AAAA,IACF,QAAQ,KAAK;AAAA,EACjB;AACJ;",
  "names": []
}
